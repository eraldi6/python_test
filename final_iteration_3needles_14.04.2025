import turtle

# This program draws a grid of rectangles with specified dimensions and margins.
# The grid is created using the turtle graphics library in Python.
# The program defines functions to draw rectangles and rows of rectangles,
# as well as a main function to create the entire grid.
# Key points are using 3 types of drills to create a basic outline, theoretic, 
# the edges and the corners, and the drilling (which makes the separation between
# the frame and the inside easier)

def rect(turtle_name,x,y):
    turtle_name.down()
    for i in range(2):
        turtle_name.fd(x)
        turtle_name.rt(90)
        turtle_name.fd(y)
        turtle_name.rt(90)
    turtle_name.up()

def row(nobx,inn,turtle1,x,y):  #nobx=number of boxes, inn=inner margin
    for i in range(nobx-1):
        rect(turtle1,x,y)
        turtle1.fd(x)
        turtle1.fd(inn)
    rect(turtle1,x,y)

def corners(turtle_name,x,y):
    turtle_name.up()
    for i in range(4):
        if i%2==0:
            a=x
        else:
            a=y
        corner=turtle_name.pos()
        turtle_name.fd(10)
        turtle_name.rt(90)
        turtle_name.fd(10)
        turtle_name.lt(90)
        turtle_name.down()
        turtle_name.setpos(corner)
        turtle_name.up()
        turtle_name.fd(a)
        corner=turtle_name.pos()
        turtle_name.rt(90)

def row_of_corners(nobx,inn, turtle2,x,y): 
    for i in range(nobx-1):
        corners(turtle2,x,y)
        turtle2.fd(x)
        turtle2.fd(inn)
    corners(turtle2,x,y)
  

def sequence1(turtle_name,lpx,lpy,nobx, noby,m,inn):   #lpx=x, lpy=y, nob=number of boxes, m=outter margin, i=inner margin 
    turtle_name.up()
    turtle_name.setpos(-400,300)
    x_seq=(lpx-(2*m)-inn*(nobx-1))/nobx
    y_seq=(lpy-(2*m)-inn*(noby-1))/noby

    if turtle_name==corner_turtle:
        turtle_name.forward(m)
        turtle_name.rt(90)
        turtle_name.fd(m)
        turtle_name.lt(90)
        home=turtle_name.pos()
        for i in range(noby):
            row_of_corners(nobx,inn, turtle_name,x_seq,y_seq)   
            turtle_name.setpos(home)
            turtle_name.rt(90)
            turtle_name.fd(y_seq)
            turtle_name.fd(inn)
            turtle_name.lt(90)
            home=turtle_name.pos()     
    else:
        if turtle_name==outline_turtle:
            rect(turtle_name,lpx,lpy)
        elif turtle_name==edge_turtle:
            m+=10
            inn+=20
        elif turtle_name==drilling_turtle:
            m+=15
            inn+=30
            
        x_seq=(lpx-(2*m)-inn*(nobx-1))/nobx
        y_seq=(lpy-(2*m)-inn*(noby-1))/noby
        turtle_name.forward(m)
        turtle_name.rt(90)
        turtle_name.fd(m)
        turtle_name.lt(90)
        home=turtle_name.pos()
        for i in range(noby):
            row(nobx,inn,turtle_name,x_seq,y_seq)    
            turtle_name.setpos(home)
            turtle_name.rt(90)
            turtle_name.fd(y_seq)
            turtle_name.fd(inn)
            turtle_name.lt(90)
            home=turtle_name.pos()

outline_turtle=turtle.Turtle()
outline_turtle.color("red")
outline_turtle.pensize(1)
outline_turtle.speed(30)
edge_turtle=turtle.Turtle()
edge_turtle.color("blue")
edge_turtle.pensize(20)
edge_turtle.speed(30)
corner_turtle=turtle.Turtle()
corner_turtle.color("yellow")
corner_turtle.pensize(1)
corner_turtle.speed(30)
drilling_turtle=turtle.Turtle()
drilling_turtle.color("orange")
drilling_turtle.pensize(10)
drilling_turtle.speed(30)
wn=turtle.Screen()

array=[outline_turtle,edge_turtle,drilling_turtle,corner_turtle]

for i in array:
    sequence1(i,800,500,4,2,40,20)

wn.mainloop()
